using System;
using System.Collections.Generic;
using System.Linq;
using UCoverme.Model;

namespace UCoverme.ModelBuilder.Filters
{
    public class AssemblyFilter : IFilter
    {
        private AssemblyFilter(string filterString, FilterType filterType)
        {
            var assemblyStartIndex = filterString.IndexOf('[') + 1;
            var assemblyEndIndex = filterString.IndexOf(']');
            var assemblyFilterLength = assemblyEndIndex - assemblyStartIndex;
            var typeNameFilterStartIndex = assemblyEndIndex + 1;
            var typeNameFilterLength = filterString.Length - typeNameFilterStartIndex;

            AssemblyFilterText = filterString.Substring(assemblyStartIndex, assemblyFilterLength);
            TypenameFilterText = filterString.Substring(typeNameFilterStartIndex, typeNameFilterLength);
            FilterType = filterType;
        }

        public string AssemblyFilterText { get; }
        public string TypenameFilterText { get; }
        public FilterType FilterType { get; }

        public void ApplyTo(ISkipable skipable)
        {
            skipable.ApplyFilter(this);
        }

        public static IFilter Parse(string filterString)
        {
            return filterString.StartsWith("+")
                ? new AssemblyFilter(filterString.Substring(1), FilterType.Inclusive)
                : new AssemblyFilter(filterString.Substring(1), FilterType.Exclusive);
        }
        
        public static IEnumerable<IFilter> GetDefaultFilters()
        {
            return DefaultDisabledAssemblies.Select(Parse);
        }

        private static readonly string[] DefaultDisabledAssemblies =
        {
            "-[mscorlib]*",
            "-[System]*",
            "-[System.*]*",
            "-[Microsoft.*]*",
            "-[*]AutogeneratedProgram",
            "-[*]<Module>"
        };

        public bool MatchesAssemblyName(string assemblyName)
        {
            if (AssemblyFilterText == "*")
            {
                return true;
            }

            if (AssemblyFilterText.StartsWith("*") && AssemblyFilterText.EndsWith("*"))
            {
                return assemblyName.IndexOf(
                           AssemblyFilterText.Substring(1, AssemblyFilterText.Length - 2),
                           StringComparison.InvariantCultureIgnoreCase) >= 0;
            }
            if (AssemblyFilterText.EndsWith("*"))
            {
                return assemblyName.StartsWith(AssemblyFilterText.Substring(0, AssemblyFilterText.Length - 1), StringComparison.InvariantCultureIgnoreCase);
            }

            if (AssemblyFilterText.StartsWith("*"))
            {
                return assemblyName.EndsWith(AssemblyFilterText.Substring(1, AssemblyFilterText.Length - 1), StringComparison.InvariantCultureIgnoreCase);
            }
            return assemblyName.Equals(AssemblyFilterText, StringComparison.InvariantCultureIgnoreCase);
        }

        public bool MatchesTypeName(string typeName)
        {
            if (TypenameFilterText == "*")
            {
                return true;
            }

            if (TypenameFilterText.StartsWith("*") && TypenameFilterText.EndsWith("*"))
            {
                return typeName.IndexOf(
                           TypenameFilterText.Substring(1, AssemblyFilterText.Length - 2),
                           StringComparison.InvariantCultureIgnoreCase) >= 0;
            }
            if (TypenameFilterText.EndsWith("*"))
            {
                return typeName.StartsWith(TypenameFilterText.Substring(0, TypenameFilterText.Length - 1), StringComparison.InvariantCultureIgnoreCase);
            }

            if (TypenameFilterText.StartsWith("*"))
            {
                return typeName.EndsWith(TypenameFilterText.Substring(1, TypenameFilterText.Length - 1), StringComparison.InvariantCultureIgnoreCase);
            }
            return typeName.Equals(TypenameFilterText, StringComparison.InvariantCultureIgnoreCase);
        }

        public override string ToString()
        {
            return FilterType == FilterType.Inclusive
                ? $"+[{AssemblyFilterText}]{TypenameFilterText}"
                : $"-[{AssemblyFilterText}]{TypenameFilterText}";
        }
    }
}